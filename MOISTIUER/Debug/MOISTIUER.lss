
MOISTIUER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dfe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000dfe  00000e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c38  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005e5  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000030e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f81  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004da  00000000  00000000  000041c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000964  00000000  00000000  000046a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00005008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072d  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 04 	call	0x926	; 0x926 <main>
  8a:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vINIT>:
void ADC_vINIT(void)
{
// 	/*DDRA=0X0;*/
// 	//ADCSRA=0X87;
	//SET_BIT(DDRA,0);
	SET_BIT(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	//SET_BIT(ADMUX,REFS1);
	SET_BIT(ADCSRA,ADEN);
  94:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS2);
  96:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
      //SET_BIT(ADCSRA,ADPS0);
}
  9a:	08 95       	ret

0000009c <ADC_u16READ>:
unsigned int ADC_u16READ(void)
{
	ADMUX=0X40;
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF))==0);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_u16READ+0x6>
	SET_BIT(ADCSRA,ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
	return (ADCW);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	95 b1       	in	r25, 0x05	; 5
//     val=(ADCL);
// 	val|=(ADCH<<8);
// 	return val;
	
	
  ac:	08 95       	ret

000000ae <vButton_init>:
#include "DIO.h" 
 
 void vButton_init(unsigned char port,unsigned char pin)
{
	vDIO_SET_BIT_DIR(port,pin,0);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	
}
  b4:	08 95       	ret

000000b6 <u8Button_read>:
unsigned char u8Button_read(unsigned char port,unsigned char pin)
{
	
	return u8DIO_READ_BIT(port,pin);
  b6:	0e 94 cd 01 	call	0x39a	; 0x39a <u8DIO_READ_BIT>
}
  ba:	08 95       	ret

000000bc <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
  bc:	84 34       	cpi	r24, 0x44	; 68
  be:	09 f4       	brne	.+2      	; 0xc2 <vDIO_SET_BIT_DIR+0x6>
  c0:	71 c0       	rjmp	.+226    	; 0x1a4 <vDIO_SET_BIT_DIR+0xe8>
  c2:	85 34       	cpi	r24, 0x45	; 69
  c4:	48 f4       	brcc	.+18     	; 0xd8 <vDIO_SET_BIT_DIR+0x1c>
  c6:	82 34       	cpi	r24, 0x42	; 66
  c8:	99 f1       	breq	.+102    	; 0x130 <vDIO_SET_BIT_DIR+0x74>
  ca:	83 34       	cpi	r24, 0x43	; 67
  cc:	08 f0       	brcs	.+2      	; 0xd0 <vDIO_SET_BIT_DIR+0x14>
  ce:	4d c0       	rjmp	.+154    	; 0x16a <vDIO_SET_BIT_DIR+0xae>
  d0:	81 34       	cpi	r24, 0x41	; 65
  d2:	09 f0       	breq	.+2      	; 0xd6 <vDIO_SET_BIT_DIR+0x1a>
  d4:	83 c0       	rjmp	.+262    	; 0x1dc <vDIO_SET_BIT_DIR+0x120>
  d6:	0f c0       	rjmp	.+30     	; 0xf6 <vDIO_SET_BIT_DIR+0x3a>
  d8:	82 36       	cpi	r24, 0x62	; 98
  da:	51 f1       	breq	.+84     	; 0x130 <vDIO_SET_BIT_DIR+0x74>
  dc:	83 36       	cpi	r24, 0x63	; 99
  de:	20 f4       	brcc	.+8      	; 0xe8 <vDIO_SET_BIT_DIR+0x2c>
  e0:	81 36       	cpi	r24, 0x61	; 97
  e2:	09 f0       	breq	.+2      	; 0xe6 <vDIO_SET_BIT_DIR+0x2a>
  e4:	7b c0       	rjmp	.+246    	; 0x1dc <vDIO_SET_BIT_DIR+0x120>
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <vDIO_SET_BIT_DIR+0x3a>
  e8:	83 36       	cpi	r24, 0x63	; 99
  ea:	09 f4       	brne	.+2      	; 0xee <vDIO_SET_BIT_DIR+0x32>
  ec:	3e c0       	rjmp	.+124    	; 0x16a <vDIO_SET_BIT_DIR+0xae>
  ee:	84 36       	cpi	r24, 0x64	; 100
  f0:	09 f0       	breq	.+2      	; 0xf4 <vDIO_SET_BIT_DIR+0x38>
  f2:	74 c0       	rjmp	.+232    	; 0x1dc <vDIO_SET_BIT_DIR+0x120>
  f4:	57 c0       	rjmp	.+174    	; 0x1a4 <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	69 f4       	brne	.+26     	; 0x114 <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
  fa:	2a b3       	in	r18, 0x1a	; 26
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <vDIO_SET_BIT_DIR+0x4c>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <vDIO_SET_BIT_DIR+0x48>
 10c:	ba 01       	movw	r22, r20
 10e:	62 2b       	or	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	ac 01       	movw	r20, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <vDIO_SET_BIT_DIR+0x66>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <vDIO_SET_BIT_DIR+0x62>
 126:	ba 01       	movw	r22, r20
 128:	60 95       	com	r22
 12a:	62 23       	and	r22, r18
 12c:	6a bb       	out	0x1a, r22	; 26
 12e:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	69 f4       	brne	.+26     	; 0x14e <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <vDIO_SET_BIT_DIR+0x86>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <vDIO_SET_BIT_DIR+0x82>
 146:	ba 01       	movw	r22, r20
 148:	62 2b       	or	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <vDIO_SET_BIT_DIR+0xa0>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <vDIO_SET_BIT_DIR+0x9c>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	67 bb       	out	0x17, r22	; 23
 168:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <vDIO_SET_BIT_DIR+0xc0>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <vDIO_SET_BIT_DIR+0xbc>
 180:	ba 01       	movw	r22, r20
 182:	62 2b       	or	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <vDIO_SET_BIT_DIR+0xda>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <vDIO_SET_BIT_DIR+0xd6>
 19a:	ba 01       	movw	r22, r20
 19c:	60 95       	com	r22
 19e:	62 23       	and	r22, r18
 1a0:	64 bb       	out	0x14, r22	; 20
 1a2:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	69 f4       	brne	.+26     	; 0x1c2 <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <vDIO_SET_BIT_DIR+0xfa>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <vDIO_SET_BIT_DIR+0xf6>
 1ba:	ba 01       	movw	r22, r20
 1bc:	62 2b       	or	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
 1c2:	21 b3       	in	r18, 0x11	; 17
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ac 01       	movw	r20, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <vDIO_SET_BIT_DIR+0x114>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <vDIO_SET_BIT_DIR+0x110>
 1d4:	ba 01       	movw	r22, r20
 1d6:	60 95       	com	r22
 1d8:	62 23       	and	r22, r18
 1da:	61 bb       	out	0x11, r22	; 17
 1dc:	08 95       	ret

000001de <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <vDIO_WRITE_BIT+0x6>
 1e2:	71 c0       	rjmp	.+226    	; 0x2c6 <vDIO_WRITE_BIT+0xe8>
 1e4:	85 34       	cpi	r24, 0x45	; 69
 1e6:	48 f4       	brcc	.+18     	; 0x1fa <vDIO_WRITE_BIT+0x1c>
 1e8:	82 34       	cpi	r24, 0x42	; 66
 1ea:	99 f1       	breq	.+102    	; 0x252 <vDIO_WRITE_BIT+0x74>
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <vDIO_WRITE_BIT+0x14>
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <vDIO_WRITE_BIT+0xae>
 1f2:	81 34       	cpi	r24, 0x41	; 65
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <vDIO_WRITE_BIT+0x1a>
 1f6:	83 c0       	rjmp	.+262    	; 0x2fe <vDIO_WRITE_BIT+0x120>
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <vDIO_WRITE_BIT+0x3a>
 1fa:	82 36       	cpi	r24, 0x62	; 98
 1fc:	51 f1       	breq	.+84     	; 0x252 <vDIO_WRITE_BIT+0x74>
 1fe:	83 36       	cpi	r24, 0x63	; 99
 200:	20 f4       	brcc	.+8      	; 0x20a <vDIO_WRITE_BIT+0x2c>
 202:	81 36       	cpi	r24, 0x61	; 97
 204:	09 f0       	breq	.+2      	; 0x208 <vDIO_WRITE_BIT+0x2a>
 206:	7b c0       	rjmp	.+246    	; 0x2fe <vDIO_WRITE_BIT+0x120>
 208:	07 c0       	rjmp	.+14     	; 0x218 <vDIO_WRITE_BIT+0x3a>
 20a:	83 36       	cpi	r24, 0x63	; 99
 20c:	09 f4       	brne	.+2      	; 0x210 <vDIO_WRITE_BIT+0x32>
 20e:	3e c0       	rjmp	.+124    	; 0x28c <vDIO_WRITE_BIT+0xae>
 210:	84 36       	cpi	r24, 0x64	; 100
 212:	09 f0       	breq	.+2      	; 0x216 <vDIO_WRITE_BIT+0x38>
 214:	74 c0       	rjmp	.+232    	; 0x2fe <vDIO_WRITE_BIT+0x120>
 216:	57 c0       	rjmp	.+174    	; 0x2c6 <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	69 f4       	brne	.+26     	; 0x236 <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
 21c:	2b b3       	in	r18, 0x1b	; 27
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <vDIO_WRITE_BIT+0x4c>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <vDIO_WRITE_BIT+0x48>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <vDIO_WRITE_BIT+0x66>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <vDIO_WRITE_BIT+0x62>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	6b bb       	out	0x1b, r22	; 27
 250:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	69 f4       	brne	.+26     	; 0x270 <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <vDIO_WRITE_BIT+0x86>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <vDIO_WRITE_BIT+0x82>
 268:	ba 01       	movw	r22, r20
 26a:	62 2b       	or	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <vDIO_WRITE_BIT+0xa0>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <vDIO_WRITE_BIT+0x9c>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	68 bb       	out	0x18, r22	; 24
 28a:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	69 f4       	brne	.+26     	; 0x2aa <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <vDIO_WRITE_BIT+0xc0>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <vDIO_WRITE_BIT+0xbc>
 2a2:	ba 01       	movw	r22, r20
 2a4:	62 2b       	or	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <vDIO_WRITE_BIT+0xda>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <vDIO_WRITE_BIT+0xd6>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	65 bb       	out	0x15, r22	; 21
 2c4:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	69 f4       	brne	.+26     	; 0x2e4 <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <vDIO_WRITE_BIT+0xfa>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <vDIO_WRITE_BIT+0xf6>
 2dc:	ba 01       	movw	r22, r20
 2de:	62 2b       	or	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <vDIO_WRITE_BIT+0x114>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <vDIO_WRITE_BIT+0x110>
 2f6:	ba 01       	movw	r22, r20
 2f8:	60 95       	com	r22
 2fa:	62 23       	and	r22, r18
 2fc:	62 bb       	out	0x12, r22	; 18
 2fe:	08 95       	ret

00000300 <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	09 f4       	brne	.+2      	; 0x306 <vDIO_TOGGLE_BIT+0x6>
 304:	3d c0       	rjmp	.+122    	; 0x380 <vDIO_TOGGLE_BIT+0x80>
 306:	85 34       	cpi	r24, 0x45	; 69
 308:	40 f4       	brcc	.+16     	; 0x31a <vDIO_TOGGLE_BIT+0x1a>
 30a:	82 34       	cpi	r24, 0x42	; 66
 30c:	f9 f0       	breq	.+62     	; 0x34c <vDIO_TOGGLE_BIT+0x4c>
 30e:	83 34       	cpi	r24, 0x43	; 67
 310:	50 f5       	brcc	.+84     	; 0x366 <vDIO_TOGGLE_BIT+0x66>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	09 f0       	breq	.+2      	; 0x318 <vDIO_TOGGLE_BIT+0x18>
 316:	40 c0       	rjmp	.+128    	; 0x398 <vDIO_TOGGLE_BIT+0x98>
 318:	0c c0       	rjmp	.+24     	; 0x332 <vDIO_TOGGLE_BIT+0x32>
 31a:	82 36       	cpi	r24, 0x62	; 98
 31c:	b9 f0       	breq	.+46     	; 0x34c <vDIO_TOGGLE_BIT+0x4c>
 31e:	83 36       	cpi	r24, 0x63	; 99
 320:	18 f4       	brcc	.+6      	; 0x328 <vDIO_TOGGLE_BIT+0x28>
 322:	81 36       	cpi	r24, 0x61	; 97
 324:	c9 f5       	brne	.+114    	; 0x398 <vDIO_TOGGLE_BIT+0x98>
 326:	05 c0       	rjmp	.+10     	; 0x332 <vDIO_TOGGLE_BIT+0x32>
 328:	83 36       	cpi	r24, 0x63	; 99
 32a:	e9 f0       	breq	.+58     	; 0x366 <vDIO_TOGGLE_BIT+0x66>
 32c:	84 36       	cpi	r24, 0x64	; 100
 32e:	a1 f5       	brne	.+104    	; 0x398 <vDIO_TOGGLE_BIT+0x98>
 330:	27 c0       	rjmp	.+78     	; 0x380 <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	ac 01       	movw	r20, r24
 33a:	02 c0       	rjmp	.+4      	; 0x340 <vDIO_TOGGLE_BIT+0x40>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <vDIO_TOGGLE_BIT+0x3c>
 344:	ba 01       	movw	r22, r20
 346:	62 27       	eor	r22, r18
 348:	6b bb       	out	0x1b, r22	; 27
	break;
 34a:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
 34c:	28 b3       	in	r18, 0x18	; 24
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	ac 01       	movw	r20, r24
 354:	02 c0       	rjmp	.+4      	; 0x35a <vDIO_TOGGLE_BIT+0x5a>
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <vDIO_TOGGLE_BIT+0x56>
 35e:	ba 01       	movw	r22, r20
 360:	62 27       	eor	r22, r18
 362:	68 bb       	out	0x18, r22	; 24
	break;
 364:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
 366:	25 b3       	in	r18, 0x15	; 21
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <vDIO_TOGGLE_BIT+0x74>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <vDIO_TOGGLE_BIT+0x70>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	65 bb       	out	0x15, r22	; 21
	break;
 37e:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
 380:	22 b3       	in	r18, 0x12	; 18
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <vDIO_TOGGLE_BIT+0x8e>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <vDIO_TOGGLE_BIT+0x8a>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	62 bb       	out	0x12, r22	; 18
 398:	08 95       	ret

0000039a <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
 39a:	84 34       	cpi	r24, 0x44	; 68
 39c:	09 f4       	brne	.+2      	; 0x3a0 <u8DIO_READ_BIT+0x6>
 39e:	4e c0       	rjmp	.+156    	; 0x43c <u8DIO_READ_BIT+0xa2>
 3a0:	85 34       	cpi	r24, 0x45	; 69
 3a2:	40 f4       	brcc	.+16     	; 0x3b4 <u8DIO_READ_BIT+0x1a>
 3a4:	82 34       	cpi	r24, 0x42	; 66
 3a6:	31 f1       	breq	.+76     	; 0x3f4 <u8DIO_READ_BIT+0x5a>
 3a8:	83 34       	cpi	r24, 0x43	; 67
 3aa:	b0 f5       	brcc	.+108    	; 0x418 <u8DIO_READ_BIT+0x7e>
 3ac:	81 34       	cpi	r24, 0x41	; 65
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <u8DIO_READ_BIT+0x18>
 3b0:	57 c0       	rjmp	.+174    	; 0x460 <u8DIO_READ_BIT+0xc6>
 3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <u8DIO_READ_BIT+0x36>
 3b4:	82 36       	cpi	r24, 0x62	; 98
 3b6:	f1 f0       	breq	.+60     	; 0x3f4 <u8DIO_READ_BIT+0x5a>
 3b8:	83 36       	cpi	r24, 0x63	; 99
 3ba:	20 f4       	brcc	.+8      	; 0x3c4 <u8DIO_READ_BIT+0x2a>
 3bc:	81 36       	cpi	r24, 0x61	; 97
 3be:	09 f0       	breq	.+2      	; 0x3c2 <u8DIO_READ_BIT+0x28>
 3c0:	4f c0       	rjmp	.+158    	; 0x460 <u8DIO_READ_BIT+0xc6>
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <u8DIO_READ_BIT+0x36>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	41 f1       	breq	.+80     	; 0x418 <u8DIO_READ_BIT+0x7e>
 3c8:	84 36       	cpi	r24, 0x64	; 100
 3ca:	09 f0       	breq	.+2      	; 0x3ce <u8DIO_READ_BIT+0x34>
 3cc:	49 c0       	rjmp	.+146    	; 0x460 <u8DIO_READ_BIT+0xc6>
 3ce:	36 c0       	rjmp	.+108    	; 0x43c <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
 3d0:	29 b3       	in	r18, 0x19	; 25
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	06 2e       	mov	r0, r22
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <u8DIO_READ_BIT+0x44>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <u8DIO_READ_BIT+0x40>
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	82 23       	and	r24, r18
 3e6:	93 23       	and	r25, r19
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <u8DIO_READ_BIT+0x54>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <u8DIO_READ_BIT+0x50>
 3f2:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
 3f4:	26 b3       	in	r18, 0x16	; 22
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	06 2e       	mov	r0, r22
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <u8DIO_READ_BIT+0x68>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <u8DIO_READ_BIT+0x64>
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	82 23       	and	r24, r18
 40a:	93 23       	and	r25, r19
 40c:	02 c0       	rjmp	.+4      	; 0x412 <u8DIO_READ_BIT+0x78>
 40e:	95 95       	asr	r25
 410:	87 95       	ror	r24
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <u8DIO_READ_BIT+0x74>
 416:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
 418:	23 b3       	in	r18, 0x13	; 19
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <u8DIO_READ_BIT+0x8c>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <u8DIO_READ_BIT+0x88>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <u8DIO_READ_BIT+0x9c>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <u8DIO_READ_BIT+0x98>
 43a:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	06 2e       	mov	r0, r22
 444:	02 c0       	rjmp	.+4      	; 0x44a <u8DIO_READ_BIT+0xb0>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <u8DIO_READ_BIT+0xac>
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	82 23       	and	r24, r18
 452:	93 23       	and	r25, r19
 454:	02 c0       	rjmp	.+4      	; 0x45a <u8DIO_READ_BIT+0xc0>
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <u8DIO_READ_BIT+0xbc>
 45e:	08 95       	ret
		break;
		default:
		break;
   }
}
 460:	08 95       	ret

00000462 <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
 462:	84 34       	cpi	r24, 0x44	; 68
 464:	d9 f0       	breq	.+54     	; 0x49c <vDIO_SET_PORT+0x3a>
 466:	85 34       	cpi	r24, 0x45	; 69
 468:	38 f4       	brcc	.+14     	; 0x478 <vDIO_SET_PORT+0x16>
 46a:	82 34       	cpi	r24, 0x42	; 66
 46c:	99 f0       	breq	.+38     	; 0x494 <vDIO_SET_PORT+0x32>
 46e:	83 34       	cpi	r24, 0x43	; 67
 470:	98 f4       	brcc	.+38     	; 0x498 <vDIO_SET_PORT+0x36>
 472:	81 34       	cpi	r24, 0x41	; 65
 474:	a1 f4       	brne	.+40     	; 0x49e <vDIO_SET_PORT+0x3c>
 476:	0c c0       	rjmp	.+24     	; 0x490 <vDIO_SET_PORT+0x2e>
 478:	82 36       	cpi	r24, 0x62	; 98
 47a:	61 f0       	breq	.+24     	; 0x494 <vDIO_SET_PORT+0x32>
 47c:	83 36       	cpi	r24, 0x63	; 99
 47e:	18 f4       	brcc	.+6      	; 0x486 <vDIO_SET_PORT+0x24>
 480:	81 36       	cpi	r24, 0x61	; 97
 482:	69 f4       	brne	.+26     	; 0x49e <vDIO_SET_PORT+0x3c>
 484:	05 c0       	rjmp	.+10     	; 0x490 <vDIO_SET_PORT+0x2e>
 486:	83 36       	cpi	r24, 0x63	; 99
 488:	39 f0       	breq	.+14     	; 0x498 <vDIO_SET_PORT+0x36>
 48a:	84 36       	cpi	r24, 0x64	; 100
 48c:	41 f4       	brne	.+16     	; 0x49e <vDIO_SET_PORT+0x3c>
 48e:	06 c0       	rjmp	.+12     	; 0x49c <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 490:	6a bb       	out	0x1a, r22	; 26
		break;
 492:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 494:	67 bb       	out	0x17, r22	; 23
		break;
 496:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 498:	64 bb       	out	0x14, r22	; 20
		break;
 49a:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 49c:	61 bb       	out	0x11, r22	; 17
 49e:	08 95       	ret

000004a0 <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	d9 f0       	breq	.+54     	; 0x4da <vDIO_WRITE_PORT+0x3a>
 4a4:	85 34       	cpi	r24, 0x45	; 69
 4a6:	38 f4       	brcc	.+14     	; 0x4b6 <vDIO_WRITE_PORT+0x16>
 4a8:	82 34       	cpi	r24, 0x42	; 66
 4aa:	99 f0       	breq	.+38     	; 0x4d2 <vDIO_WRITE_PORT+0x32>
 4ac:	83 34       	cpi	r24, 0x43	; 67
 4ae:	98 f4       	brcc	.+38     	; 0x4d6 <vDIO_WRITE_PORT+0x36>
 4b0:	81 34       	cpi	r24, 0x41	; 65
 4b2:	a1 f4       	brne	.+40     	; 0x4dc <vDIO_WRITE_PORT+0x3c>
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <vDIO_WRITE_PORT+0x2e>
 4b6:	82 36       	cpi	r24, 0x62	; 98
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <vDIO_WRITE_PORT+0x32>
 4ba:	83 36       	cpi	r24, 0x63	; 99
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <vDIO_WRITE_PORT+0x24>
 4be:	81 36       	cpi	r24, 0x61	; 97
 4c0:	69 f4       	brne	.+26     	; 0x4dc <vDIO_WRITE_PORT+0x3c>
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <vDIO_WRITE_PORT+0x2e>
 4c4:	83 36       	cpi	r24, 0x63	; 99
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <vDIO_WRITE_PORT+0x36>
 4c8:	84 36       	cpi	r24, 0x64	; 100
 4ca:	41 f4       	brne	.+16     	; 0x4dc <vDIO_WRITE_PORT+0x3c>
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4ce:	6b bb       	out	0x1b, r22	; 27
		break;
 4d0:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4d2:	68 bb       	out	0x18, r22	; 24
		break;
 4d4:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4d6:	65 bb       	out	0x15, r22	; 21
		break;
 4d8:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4da:	62 bb       	out	0x12, r22	; 18
 4dc:	08 95       	ret

000004de <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
 4de:	84 34       	cpi	r24, 0x44	; 68
 4e0:	d9 f0       	breq	.+54     	; 0x518 <u8DIO_READ_PORT+0x3a>
 4e2:	85 34       	cpi	r24, 0x45	; 69
 4e4:	38 f4       	brcc	.+14     	; 0x4f4 <u8DIO_READ_PORT+0x16>
 4e6:	82 34       	cpi	r24, 0x42	; 66
 4e8:	99 f0       	breq	.+38     	; 0x510 <u8DIO_READ_PORT+0x32>
 4ea:	83 34       	cpi	r24, 0x43	; 67
 4ec:	98 f4       	brcc	.+38     	; 0x514 <u8DIO_READ_PORT+0x36>
 4ee:	81 34       	cpi	r24, 0x41	; 65
 4f0:	a1 f4       	brne	.+40     	; 0x51a <u8DIO_READ_PORT+0x3c>
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <u8DIO_READ_PORT+0x2e>
 4f4:	82 36       	cpi	r24, 0x62	; 98
 4f6:	61 f0       	breq	.+24     	; 0x510 <u8DIO_READ_PORT+0x32>
 4f8:	83 36       	cpi	r24, 0x63	; 99
 4fa:	18 f4       	brcc	.+6      	; 0x502 <u8DIO_READ_PORT+0x24>
 4fc:	81 36       	cpi	r24, 0x61	; 97
 4fe:	69 f4       	brne	.+26     	; 0x51a <u8DIO_READ_PORT+0x3c>
 500:	05 c0       	rjmp	.+10     	; 0x50c <u8DIO_READ_PORT+0x2e>
 502:	83 36       	cpi	r24, 0x63	; 99
 504:	39 f0       	breq	.+14     	; 0x514 <u8DIO_READ_PORT+0x36>
 506:	84 36       	cpi	r24, 0x64	; 100
 508:	41 f4       	brne	.+16     	; 0x51a <u8DIO_READ_PORT+0x3c>
 50a:	06 c0       	rjmp	.+12     	; 0x518 <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
 50c:	89 b3       	in	r24, 0x19	; 25
		break;
 50e:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
 510:	86 b3       	in	r24, 0x16	; 22
		break;
 512:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
 514:	83 b3       	in	r24, 0x13	; 19
		break;
 516:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
 518:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
 51a:	08 95       	ret

0000051c <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
 51c:	84 34       	cpi	r24, 0x44	; 68
 51e:	09 f1       	breq	.+66     	; 0x562 <vDIO_TOGGLE_PORT+0x46>
 520:	85 34       	cpi	r24, 0x45	; 69
 522:	38 f4       	brcc	.+14     	; 0x532 <vDIO_TOGGLE_PORT+0x16>
 524:	82 34       	cpi	r24, 0x42	; 66
 526:	a9 f0       	breq	.+42     	; 0x552 <vDIO_TOGGLE_PORT+0x36>
 528:	83 34       	cpi	r24, 0x43	; 67
 52a:	b8 f4       	brcc	.+46     	; 0x55a <vDIO_TOGGLE_PORT+0x3e>
 52c:	81 34       	cpi	r24, 0x41	; 65
 52e:	e1 f4       	brne	.+56     	; 0x568 <vDIO_TOGGLE_PORT+0x4c>
 530:	0c c0       	rjmp	.+24     	; 0x54a <vDIO_TOGGLE_PORT+0x2e>
 532:	82 36       	cpi	r24, 0x62	; 98
 534:	71 f0       	breq	.+28     	; 0x552 <vDIO_TOGGLE_PORT+0x36>
 536:	83 36       	cpi	r24, 0x63	; 99
 538:	18 f4       	brcc	.+6      	; 0x540 <vDIO_TOGGLE_PORT+0x24>
 53a:	81 36       	cpi	r24, 0x61	; 97
 53c:	a9 f4       	brne	.+42     	; 0x568 <vDIO_TOGGLE_PORT+0x4c>
 53e:	05 c0       	rjmp	.+10     	; 0x54a <vDIO_TOGGLE_PORT+0x2e>
 540:	83 36       	cpi	r24, 0x63	; 99
 542:	59 f0       	breq	.+22     	; 0x55a <vDIO_TOGGLE_PORT+0x3e>
 544:	84 36       	cpi	r24, 0x64	; 100
 546:	81 f4       	brne	.+32     	; 0x568 <vDIO_TOGGLE_PORT+0x4c>
 548:	0c c0       	rjmp	.+24     	; 0x562 <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 54a:	8b b3       	in	r24, 0x1b	; 27
 54c:	80 95       	com	r24
 54e:	8b bb       	out	0x1b, r24	; 27
		break;
 550:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 552:	88 b3       	in	r24, 0x18	; 24
 554:	80 95       	com	r24
 556:	88 bb       	out	0x18, r24	; 24
		break;
 558:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 55a:	85 b3       	in	r24, 0x15	; 21
 55c:	80 95       	com	r24
 55e:	85 bb       	out	0x15, r24	; 21
		break;
 560:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 562:	82 b3       	in	r24, 0x12	; 18
 564:	80 95       	com	r24
 566:	82 bb       	out	0x12, r24	; 18
 568:	08 95       	ret

0000056a <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
 56a:	84 34       	cpi	r24, 0x44	; 68
 56c:	09 f4       	brne	.+2      	; 0x570 <vDIO_PULLUP_CONNECT+0x6>
 56e:	71 c0       	rjmp	.+226    	; 0x652 <vDIO_PULLUP_CONNECT+0xe8>
 570:	85 34       	cpi	r24, 0x45	; 69
 572:	48 f4       	brcc	.+18     	; 0x586 <vDIO_PULLUP_CONNECT+0x1c>
 574:	82 34       	cpi	r24, 0x42	; 66
 576:	99 f1       	breq	.+102    	; 0x5de <vDIO_PULLUP_CONNECT+0x74>
 578:	83 34       	cpi	r24, 0x43	; 67
 57a:	08 f0       	brcs	.+2      	; 0x57e <vDIO_PULLUP_CONNECT+0x14>
 57c:	4d c0       	rjmp	.+154    	; 0x618 <vDIO_PULLUP_CONNECT+0xae>
 57e:	81 34       	cpi	r24, 0x41	; 65
 580:	09 f0       	breq	.+2      	; 0x584 <vDIO_PULLUP_CONNECT+0x1a>
 582:	83 c0       	rjmp	.+262    	; 0x68a <vDIO_PULLUP_CONNECT+0x120>
 584:	0f c0       	rjmp	.+30     	; 0x5a4 <vDIO_PULLUP_CONNECT+0x3a>
 586:	82 36       	cpi	r24, 0x62	; 98
 588:	51 f1       	breq	.+84     	; 0x5de <vDIO_PULLUP_CONNECT+0x74>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	20 f4       	brcc	.+8      	; 0x596 <vDIO_PULLUP_CONNECT+0x2c>
 58e:	81 36       	cpi	r24, 0x61	; 97
 590:	09 f0       	breq	.+2      	; 0x594 <vDIO_PULLUP_CONNECT+0x2a>
 592:	7b c0       	rjmp	.+246    	; 0x68a <vDIO_PULLUP_CONNECT+0x120>
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <vDIO_PULLUP_CONNECT+0x3a>
 596:	83 36       	cpi	r24, 0x63	; 99
 598:	09 f4       	brne	.+2      	; 0x59c <vDIO_PULLUP_CONNECT+0x32>
 59a:	3e c0       	rjmp	.+124    	; 0x618 <vDIO_PULLUP_CONNECT+0xae>
 59c:	84 36       	cpi	r24, 0x64	; 100
 59e:	09 f0       	breq	.+2      	; 0x5a2 <vDIO_PULLUP_CONNECT+0x38>
 5a0:	74 c0       	rjmp	.+232    	; 0x68a <vDIO_PULLUP_CONNECT+0x120>
 5a2:	57 c0       	rjmp	.+174    	; 0x652 <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	69 f4       	brne	.+26     	; 0x5c2 <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
 5a8:	2b b3       	in	r18, 0x1b	; 27
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ac 01       	movw	r20, r24
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <vDIO_PULLUP_CONNECT+0x4c>
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <vDIO_PULLUP_CONNECT+0x48>
 5ba:	ba 01       	movw	r22, r20
 5bc:	62 2b       	or	r22, r18
 5be:	6b bb       	out	0x1b, r22	; 27
 5c0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
 5c2:	2b b3       	in	r18, 0x1b	; 27
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <vDIO_PULLUP_CONNECT+0x66>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <vDIO_PULLUP_CONNECT+0x62>
 5d4:	ba 01       	movw	r22, r20
 5d6:	60 95       	com	r22
 5d8:	62 23       	and	r22, r18
 5da:	6b bb       	out	0x1b, r22	; 27
 5dc:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
 5de:	41 30       	cpi	r20, 0x01	; 1
 5e0:	69 f4       	brne	.+26     	; 0x5fc <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
 5e2:	28 b3       	in	r18, 0x18	; 24
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ac 01       	movw	r20, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <vDIO_PULLUP_CONNECT+0x86>
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <vDIO_PULLUP_CONNECT+0x82>
 5f4:	ba 01       	movw	r22, r20
 5f6:	62 2b       	or	r22, r18
 5f8:	68 bb       	out	0x18, r22	; 24
 5fa:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
 5fc:	28 b3       	in	r18, 0x18	; 24
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	ac 01       	movw	r20, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <vDIO_PULLUP_CONNECT+0xa0>
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <vDIO_PULLUP_CONNECT+0x9c>
 60e:	ba 01       	movw	r22, r20
 610:	60 95       	com	r22
 612:	62 23       	and	r22, r18
 614:	68 bb       	out	0x18, r22	; 24
 616:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
 618:	41 30       	cpi	r20, 0x01	; 1
 61a:	69 f4       	brne	.+26     	; 0x636 <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
 61c:	25 b3       	in	r18, 0x15	; 21
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	ac 01       	movw	r20, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <vDIO_PULLUP_CONNECT+0xc0>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <vDIO_PULLUP_CONNECT+0xbc>
 62e:	ba 01       	movw	r22, r20
 630:	62 2b       	or	r22, r18
 632:	65 bb       	out	0x15, r22	; 21
 634:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
 636:	25 b3       	in	r18, 0x15	; 21
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	ac 01       	movw	r20, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <vDIO_PULLUP_CONNECT+0xda>
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <vDIO_PULLUP_CONNECT+0xd6>
 648:	ba 01       	movw	r22, r20
 64a:	60 95       	com	r22
 64c:	62 23       	and	r22, r18
 64e:	65 bb       	out	0x15, r22	; 21
 650:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
 652:	41 30       	cpi	r20, 0x01	; 1
 654:	69 f4       	brne	.+26     	; 0x670 <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
 656:	22 b3       	in	r18, 0x12	; 18
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	ac 01       	movw	r20, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vDIO_PULLUP_CONNECT+0xfa>
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <vDIO_PULLUP_CONNECT+0xf6>
 668:	ba 01       	movw	r22, r20
 66a:	62 2b       	or	r22, r18
 66c:	62 bb       	out	0x12, r22	; 18
 66e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
 670:	22 b3       	in	r18, 0x12	; 18
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	ac 01       	movw	r20, r24
 678:	02 c0       	rjmp	.+4      	; 0x67e <vDIO_PULLUP_CONNECT+0x114>
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <vDIO_PULLUP_CONNECT+0x110>
 682:	ba 01       	movw	r22, r20
 684:	60 95       	com	r22
 686:	62 23       	and	r22, r18
 688:	62 bb       	out	0x12, r22	; 18
 68a:	08 95       	ret

0000068c <vDIO_WRITE_LOW_NIBBLE>:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
	value&=0x0f;
 68c:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
 68e:	82 34       	cpi	r24, 0x42	; 66
 690:	81 f0       	breq	.+32     	; 0x6b2 <vDIO_WRITE_LOW_NIBBLE+0x26>
 692:	83 34       	cpi	r24, 0x43	; 67
 694:	18 f4       	brcc	.+6      	; 0x69c <vDIO_WRITE_LOW_NIBBLE+0x10>
 696:	81 34       	cpi	r24, 0x41	; 65
 698:	f1 f4       	brne	.+60     	; 0x6d6 <vDIO_WRITE_LOW_NIBBLE+0x4a>
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <vDIO_WRITE_LOW_NIBBLE+0x1a>
 69c:	83 34       	cpi	r24, 0x43	; 67
 69e:	79 f0       	breq	.+30     	; 0x6be <vDIO_WRITE_LOW_NIBBLE+0x32>
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	c9 f4       	brne	.+50     	; 0x6d6 <vDIO_WRITE_LOW_NIBBLE+0x4a>
 6a4:	12 c0       	rjmp	.+36     	; 0x6ca <vDIO_WRITE_LOW_NIBBLE+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 6a6:	8b b3       	in	r24, 0x1b	; 27
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 6ac:	8b b3       	in	r24, 0x1b	; 27
 6ae:	86 2b       	or	r24, r22
 6b0:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 6b2:	88 b3       	in	r24, 0x18	; 24
 6b4:	80 7f       	andi	r24, 0xF0	; 240
 6b6:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 6b8:	88 b3       	in	r24, 0x18	; 24
 6ba:	86 2b       	or	r24, r22
 6bc:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 6be:	85 b3       	in	r24, 0x15	; 21
 6c0:	80 7f       	andi	r24, 0xF0	; 240
 6c2:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 6c4:	85 b3       	in	r24, 0x15	; 21
 6c6:	86 2b       	or	r24, r22
 6c8:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 6ca:	82 b3       	in	r24, 0x12	; 18
 6cc:	80 7f       	andi	r24, 0xF0	; 240
 6ce:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 6d0:	82 b3       	in	r24, 0x12	; 18
 6d2:	68 2b       	or	r22, r24
 6d4:	62 bb       	out	0x12, r22	; 18
 6d6:	08 95       	ret

000006d8 <vDIO_WRITE_HIGH_NIBBLE>:
	}
}
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
	value<<=4;
 6d8:	62 95       	swap	r22
 6da:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 6dc:	82 34       	cpi	r24, 0x42	; 66
 6de:	81 f0       	breq	.+32     	; 0x700 <vDIO_WRITE_HIGH_NIBBLE+0x28>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	18 f4       	brcc	.+6      	; 0x6ea <vDIO_WRITE_HIGH_NIBBLE+0x12>
 6e4:	81 34       	cpi	r24, 0x41	; 65
 6e6:	f1 f4       	brne	.+60     	; 0x724 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <vDIO_WRITE_HIGH_NIBBLE+0x1c>
 6ea:	83 34       	cpi	r24, 0x43	; 67
 6ec:	79 f0       	breq	.+30     	; 0x70c <vDIO_WRITE_HIGH_NIBBLE+0x34>
 6ee:	84 34       	cpi	r24, 0x44	; 68
 6f0:	c9 f4       	brne	.+50     	; 0x724 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
 6f2:	12 c0       	rjmp	.+36     	; 0x718 <vDIO_WRITE_HIGH_NIBBLE+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 6f4:	8b b3       	in	r24, 0x1b	; 27
 6f6:	8f 70       	andi	r24, 0x0F	; 15
 6f8:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 6fa:	8b b3       	in	r24, 0x1b	; 27
 6fc:	86 2b       	or	r24, r22
 6fe:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 700:	88 b3       	in	r24, 0x18	; 24
 702:	8f 70       	andi	r24, 0x0F	; 15
 704:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 706:	88 b3       	in	r24, 0x18	; 24
 708:	86 2b       	or	r24, r22
 70a:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 70c:	85 b3       	in	r24, 0x15	; 21
 70e:	8f 70       	andi	r24, 0x0F	; 15
 710:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 712:	85 b3       	in	r24, 0x15	; 21
 714:	86 2b       	or	r24, r22
 716:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 718:	82 b3       	in	r24, 0x12	; 18
 71a:	8f 70       	andi	r24, 0x0F	; 15
 71c:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 71e:	82 b3       	in	r24, 0x12	; 18
 720:	68 2b       	or	r22, r24
 722:	62 bb       	out	0x12, r22	; 18
 724:	08 95       	ret

00000726 <LCD_ENABLE>:
	_delay_ms(1);

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_DATA,EN,1);
 726:	81 e4       	ldi	r24, 0x41	; 65
 728:	63 e0       	ldi	r22, 0x03	; 3
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 730:	8f e9       	ldi	r24, 0x9F	; 159
 732:	9f e0       	ldi	r25, 0x0F	; 15
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <LCD_ENABLE+0xe>
 738:	00 c0       	rjmp	.+0      	; 0x73a <LCD_ENABLE+0x14>
 73a:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
 73c:	81 e4       	ldi	r24, 0x41	; 65
 73e:	63 e0       	ldi	r22, 0x03	; 3
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
 746:	8f e9       	ldi	r24, 0x9F	; 159
 748:	9f e0       	ldi	r25, 0x0F	; 15
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_ENABLE+0x24>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_ENABLE+0x2a>
 750:	00 00       	nop
	_delay_ms(2);
	
}
 752:	08 95       	ret

00000754 <LCD_SEND_CHAR>:
	_delay_ms(1);
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
 754:	cf 93       	push	r28
 756:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
	LCD_ENABLE();
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data>>4);
 758:	68 2f       	mov	r22, r24
 75a:	62 95       	swap	r22
 75c:	6f 70       	andi	r22, 0x0F	; 15
 75e:	81 e4       	ldi	r24, 0x41	; 65
 760:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
 764:	81 e4       	ldi	r24, 0x41	; 65
 766:	62 e0       	ldi	r22, 0x02	; 2
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	LCD_ENABLE();
 76e:	0e 94 93 03 	call	0x726	; 0x726 <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
 772:	81 e4       	ldi	r24, 0x41	; 65
 774:	6c 2f       	mov	r22, r28
 776:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
 77a:	81 e4       	ldi	r24, 0x41	; 65
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	LCD_ENABLE();
 784:	0e 94 93 03 	call	0x726	; 0x726 <LCD_ENABLE>
 788:	8f ec       	ldi	r24, 0xCF	; 207
 78a:	97 e0       	ldi	r25, 0x07	; 7
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <LCD_SEND_CHAR+0x38>
 790:	00 c0       	rjmp	.+0      	; 0x792 <LCD_SEND_CHAR+0x3e>
 792:	00 00       	nop
	#endif
	_delay_ms(1);

}
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
 798:	cf 93       	push	r28
 79a:	c8 2f       	mov	r28, r24
	vDIO_WRITE_PORT(LCD_DATA,cmd);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd>>4);
 79c:	68 2f       	mov	r22, r24
 79e:	62 95       	swap	r22
 7a0:	6f 70       	andi	r22, 0x0F	; 15
 7a2:	81 e4       	ldi	r24, 0x41	; 65
 7a4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
 7a8:	81 e4       	ldi	r24, 0x41	; 65
 7aa:	62 e0       	ldi	r22, 0x02	; 2
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	LCD_ENABLE();
 7b2:	0e 94 93 03 	call	0x726	; 0x726 <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd);
 7b6:	81 e4       	ldi	r24, 0x41	; 65
 7b8:	6c 2f       	mov	r22, r28
 7ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	62 e0       	ldi	r22, 0x02	; 2
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	LCD_ENABLE();
 7c8:	0e 94 93 03 	call	0x726	; 0x726 <LCD_ENABLE>
 7cc:	8f ec       	ldi	r24, 0xCF	; 207
 7ce:	97 e0       	ldi	r25, 0x07	; 7
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCD_SEND_CMD+0x38>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <LCD_SEND_CMD+0x3e>
 7d6:	00 00       	nop
	#endif
	_delay_ms(1);
	
}
 7d8:	cf 91       	pop	r28
 7da:	08 95       	ret

000007dc <LCD_INIT>:
 7dc:	8f ef       	ldi	r24, 0xFF	; 255
 7de:	91 ee       	ldi	r25, 0xE1	; 225
 7e0:	a4 e0       	ldi	r26, 0x04	; 4
 7e2:	81 50       	subi	r24, 0x01	; 1
 7e4:	90 40       	sbci	r25, 0x00	; 0
 7e6:	a0 40       	sbci	r26, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <LCD_INIT+0x6>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_INIT+0x10>
 7ec:	00 00       	nop
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
 7ee:	81 e4       	ldi	r24, 0x41	; 65
 7f0:	64 e0       	ldi	r22, 0x04	; 4
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
 7f8:	81 e4       	ldi	r24, 0x41	; 65
 7fa:	65 e0       	ldi	r22, 0x05	; 5
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
 802:	81 e4       	ldi	r24, 0x41	; 65
 804:	66 e0       	ldi	r22, 0x06	; 6
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
 80c:	81 e4       	ldi	r24, 0x41	; 65
 80e:	67 e0       	ldi	r22, 0x07	; 7
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,EN,1);
 816:	81 e4       	ldi	r24, 0x41	; 65
 818:	63 e0       	ldi	r22, 0x03	; 3
 81a:	41 e0       	ldi	r20, 0x01	; 1
 81c:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,RS,1);
 820:	81 e4       	ldi	r24, 0x41	; 65
 822:	62 e0       	ldi	r22, 0x02	; 2
 824:	41 e0       	ldi	r20, 0x01	; 1
 826:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,WR,1);
 82a:	81 e4       	ldi	r24, 0x41	; 65
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_DATA,WR,0);
 834:	81 e4       	ldi	r24, 0x41	; 65
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
	LCD_SEND_CMD(RET_HOME);
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 844:	af e1       	ldi	r26, 0x1F	; 31
 846:	be e4       	ldi	r27, 0x4E	; 78
 848:	11 97       	sbiw	r26, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_INIT+0x6c>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_INIT+0x72>
 84e:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BIT);
 850:	88 e2       	ldi	r24, 0x28	; 40
 852:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 856:	8f ec       	ldi	r24, 0xCF	; 207
 858:	97 e0       	ldi	r25, 0x07	; 7
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_INIT+0x7e>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
 862:	8e e0       	ldi	r24, 0x0E	; 14
 864:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 868:	af ec       	ldi	r26, 0xCF	; 207
 86a:	b7 e0       	ldi	r27, 0x07	; 7
 86c:	11 97       	sbiw	r26, 0x01	; 1
 86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
 870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
 872:	00 00       	nop
 874:	8f e1       	ldi	r24, 0x1F	; 31
 876:	9e e4       	ldi	r25, 0x4E	; 78
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
 87e:	00 00       	nop
	_delay_ms(1);
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE);
 880:	86 e0       	ldi	r24, 0x06	; 6
 882:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 886:	af ec       	ldi	r26, 0xCF	; 207
 888:	b7 e0       	ldi	r27, 0x07	; 7
 88a:	11 97       	sbiw	r26, 0x01	; 1
 88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
	_delay_ms(1);
	#endif
	
}
 892:	08 95       	ret

00000894 <LCD_clear_screen>:
	_delay_ms(1);
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 89a:	8f e1       	ldi	r24, 0x1F	; 31
 89c:	9e e4       	ldi	r25, 0x4E	; 78
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <LCD_clear_screen+0xa>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <LCD_clear_screen+0x10>
 8a4:	00 00       	nop
	_delay_ms(10);
}
 8a6:	08 95       	ret

000008a8 <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 8ae:	88 81       	ld	r24, Y
 8b0:	88 23       	and	r24, r24
 8b2:	31 f0       	breq	.+12     	; 0x8c0 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
 8b4:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
 8b6:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
 8ba:	89 91       	ld	r24, Y+
 8bc:	88 23       	and	r24, r24
 8be:	d9 f7       	brne	.-10     	; 0x8b6 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

000008c6 <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
 8c6:	28 2f       	mov	r18, r24
 8c8:	21 50       	subi	r18, 0x01	; 1
 8ca:	22 30       	cpi	r18, 0x02	; 2
 8cc:	70 f4       	brcc	.+28     	; 0x8ea <LCD_MOVE_CURSOR+0x24>
 8ce:	61 31       	cpi	r22, 0x11	; 17
 8d0:	70 f4       	brcc	.+28     	; 0x8ee <LCD_MOVE_CURSOR+0x28>
 8d2:	66 23       	and	r22, r22
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
 8da:	96 2f       	mov	r25, r22
 8dc:	91 58       	subi	r25, 0x81	; 129
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
 8e0:	82 30       	cpi	r24, 0x02	; 2
 8e2:	41 f4       	brne	.+16     	; 0x8f4 <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
 8e4:	96 2f       	mov	r25, r22
 8e6:	91 54       	subi	r25, 0x41	; 65
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
 8ea:	90 e8       	ldi	r25, 0x80	; 128
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <LCD_MOVE_CURSOR+0x2e>
 8ee:	90 e8       	ldi	r25, 0x80	; 128
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <LCD_MOVE_CURSOR+0x2e>
 8f2:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
 8f4:	89 2f       	mov	r24, r25
 8f6:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
 8fa:	8f ec       	ldi	r24, 0xCF	; 207
 8fc:	97 e0       	ldi	r25, 0x07	; 7
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <LCD_MOVE_CURSOR+0x38>
 902:	00 c0       	rjmp	.+0      	; 0x904 <LCD_MOVE_CURSOR+0x3e>
 904:	00 00       	nop
	_delay_ms(1);	 
}
 906:	08 95       	ret

00000908 <vLed_init>:

#include "DIO.h"
void vLed_init(unsigned char port, unsigned char pin)
{
	vDIO_SET_BIT_DIR(port,pin,1);
 908:	41 e0       	ldi	r20, 0x01	; 1
 90a:	0e 94 5e 00 	call	0xbc	; 0xbc <vDIO_SET_BIT_DIR>
}
 90e:	08 95       	ret

00000910 <vLed_on>:
void vLed_on(unsigned char port,unsigned char pin)
{
	vDIO_WRITE_BIT(port,pin,1);
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
}
 916:	08 95       	ret

00000918 <vLed_off>:
void vLed_off(unsigned char port,unsigned char pin)
{
	vDIO_WRITE_BIT(port,pin,0);
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	0e 94 ef 00 	call	0x1de	; 0x1de <vDIO_WRITE_BIT>
}
 91e:	08 95       	ret

00000920 <vLed_toggle>:
void vLed_toggle(unsigned char port,unsigned char pin)
{
	vDIO_TOGGLE_BIT(port,pin);
 920:	0e 94 80 01 	call	0x300	; 0x300 <vDIO_TOGGLE_BIT>
}
 924:	08 95       	ret

00000926 <main>:
{
	
// 	SET_BIT(DDRB,0);
// 	SET_BIT(DDRB,1);
// 	SET_BIT(DDRB,2);
	LCD_INIT();
 926:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_INIT>
	ADC_vINIT();
 92a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vINIT>
	LCD_SEND_CMD(0X0C);
 92e:	8c e0       	ldi	r24, 0x0C	; 12
 930:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_SEND_CMD>
	LCD_SEND_STRING("Soil Moisture...");
 934:	80 e6       	ldi	r24, 0x60	; 96
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
 93c:	8f ef       	ldi	r24, 0xFF	; 255
 93e:	90 e7       	ldi	r25, 0x70	; 112
 940:	a2 e0       	ldi	r26, 0x02	; 2
 942:	81 50       	subi	r24, 0x01	; 1
 944:	90 40       	sbci	r25, 0x00	; 0
 946:	a0 40       	sbci	r26, 0x00	; 0
 948:	e1 f7       	brne	.-8      	; 0x942 <main+0x1c>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <main+0x26>
 94c:	00 00       	nop
	_delay_ms(100);
	LCD_clear_screen();
 94e:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clear_screen>
	LCD_SEND_STRING("Percent:");
 952:	81 e7       	ldi	r24, 0x71	; 113
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
	 int val;
    while(1)
    {
     	    ADC_value = ADC_u16READ();
		    moisture = (ADC_value*100.00)/1023.00;
			val=100-moisture;
 95a:	04 e6       	ldi	r16, 0x64	; 100
 95c:	10 e0       	ldi	r17, 0x00	; 0
			if ( val>=0 && val<=30)
			{
				LCD_MOVE_CURSOR(1,9);
				LCD_SEND_CHAR((val/10)+48);
 95e:	0f 2e       	mov	r0, r31
 960:	fa e0       	ldi	r31, 0x0A	; 10
 962:	ef 2e       	mov	r14, r31
 964:	ff 24       	eor	r15, r15
 966:	f0 2d       	mov	r31, r0
				LCD_SEND_CHAR((val%10)+48);
				LCD_SEND_STRING("%");
 968:	0f 2e       	mov	r0, r31
 96a:	fa e7       	ldi	r31, 0x7A	; 122
 96c:	cf 2e       	mov	r12, r31
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	df 2e       	mov	r13, r31
 972:	f0 2d       	mov	r31, r0
				LCD_MOVE_CURSOR(2,1);
				LCD_SEND_STRING("The Soil is Dry  ");
 974:	0f 2e       	mov	r0, r31
 976:	fc e7       	ldi	r31, 0x7C	; 124
 978:	af 2e       	mov	r10, r31
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	bf 2e       	mov	r11, r31
 97e:	f0 2d       	mov	r31, r0
				LCD_MOVE_CURSOR(1,9);
				LCD_SEND_CHAR((val/10)+48);
				LCD_SEND_CHAR((val%10)+48);
				LCD_SEND_STRING("%");
				LCD_MOVE_CURSOR(2,1);
				LCD_SEND_STRING("The Soil is Wet  ");
 980:	0f 2e       	mov	r0, r31
 982:	ff e9       	ldi	r31, 0x9F	; 159
 984:	8f 2e       	mov	r8, r31
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	9f 2e       	mov	r9, r31
 98a:	f0 2d       	mov	r31, r0
				LCD_MOVE_CURSOR(1,9);
				LCD_SEND_CHAR((val/10)+48);
				LCD_SEND_CHAR((val%10)+48);
				LCD_SEND_STRING("%");
				LCD_MOVE_CURSOR(2,1);
				LCD_SEND_STRING("Soil is Suitable");
 98c:	0f 2e       	mov	r0, r31
 98e:	fe e8       	ldi	r31, 0x8E	; 142
 990:	6f 2e       	mov	r6, r31
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	7f 2e       	mov	r7, r31
 996:	f0 2d       	mov	r31, r0
	 int ADC_value;
	 int moisture;
	 int val;
    while(1)
    {
     	    ADC_value = ADC_u16READ();
 998:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16READ>
		    moisture = (ADC_value*100.00)/1023.00;
 99c:	dc 01       	movw	r26, r24
 99e:	bd 01       	movw	r22, r26
 9a0:	88 27       	eor	r24, r24
 9a2:	77 fd       	sbrc	r23, 7
 9a4:	80 95       	com	r24
 9a6:	98 2f       	mov	r25, r24
 9a8:	0e 94 e7 05 	call	0xbce	; 0xbce <__floatsisf>
 9ac:	20 e0       	ldi	r18, 0x00	; 0
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	48 ec       	ldi	r20, 0xC8	; 200
 9b2:	52 e4       	ldi	r21, 0x42	; 66
 9b4:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	30 ec       	ldi	r19, 0xC0	; 192
 9bc:	4f e7       	ldi	r20, 0x7F	; 127
 9be:	54 e4       	ldi	r21, 0x44	; 68
 9c0:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divsf3>
 9c4:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fixsfsi>
 9c8:	dc 01       	movw	r26, r24
 9ca:	cb 01       	movw	r24, r22
			val=100-moisture;
 9cc:	e8 01       	movw	r28, r16
 9ce:	c8 1b       	sub	r28, r24
 9d0:	d9 0b       	sbc	r29, r25
			if ( val>=0 && val<=30)
 9d2:	cf 31       	cpi	r28, 0x1F	; 31
 9d4:	d1 05       	cpc	r29, r1
 9d6:	e0 f4       	brcc	.+56     	; 0xa10 <main+0xea>
			{
				LCD_MOVE_CURSOR(1,9);
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	69 e0       	ldi	r22, 0x09	; 9
 9dc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR((val/10)+48);
 9e0:	ce 01       	movw	r24, r28
 9e2:	b7 01       	movw	r22, r14
 9e4:	0e 94 d6 06 	call	0xdac	; 0xdac <__divmodhi4>
 9e8:	c8 2f       	mov	r28, r24
 9ea:	86 2f       	mov	r24, r22
 9ec:	80 5d       	subi	r24, 0xD0	; 208
 9ee:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((val%10)+48);
 9f2:	8c 2f       	mov	r24, r28
 9f4:	80 5d       	subi	r24, 0xD0	; 208
 9f6:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_STRING("%");
 9fa:	c6 01       	movw	r24, r12
 9fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,1);
 a00:	82 e0       	ldi	r24, 0x02	; 2
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("The Soil is Dry  ");
 a08:	c5 01       	movw	r24, r10
 a0a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
 a0e:	c4 cf       	rjmp	.-120    	; 0x998 <main+0x72>
// 				CLEAR_BIT(PORTB,2);
// 			   CLEAR_BIT(PORTB,1);
				
				
			}
		    else if(val>30 && val<=70)
 a10:	ce 01       	movw	r24, r28
 a12:	4f 97       	sbiw	r24, 0x1f	; 31
 a14:	88 32       	cpi	r24, 0x28	; 40
 a16:	91 05       	cpc	r25, r1
 a18:	e0 f4       	brcc	.+56     	; 0xa52 <main+0x12c>
			{
				LCD_MOVE_CURSOR(1,9);
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	69 e0       	ldi	r22, 0x09	; 9
 a1e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR((val/10)+48);
 a22:	ce 01       	movw	r24, r28
 a24:	b7 01       	movw	r22, r14
 a26:	0e 94 d6 06 	call	0xdac	; 0xdac <__divmodhi4>
 a2a:	c8 2f       	mov	r28, r24
 a2c:	86 2f       	mov	r24, r22
 a2e:	80 5d       	subi	r24, 0xD0	; 208
 a30:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((val%10)+48);
 a34:	8c 2f       	mov	r24, r28
 a36:	80 5d       	subi	r24, 0xD0	; 208
 a38:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_STRING("%");
 a3c:	c6 01       	movw	r24, r12
 a3e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,1);
 a42:	82 e0       	ldi	r24, 0x02	; 2
 a44:	61 e0       	ldi	r22, 0x01	; 1
 a46:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("Soil is Suitable");
 a4a:	c3 01       	movw	r24, r6
 a4c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
 a50:	a3 cf       	rjmp	.-186    	; 0x998 <main+0x72>
// 				SET_BIT(PORTB,1);
// 				CLEAR_BIT(PORTB,2);
// 				CLEAR_BIT(PORTB,0);
			}
	        else if (val>70 && val<=99)
 a52:	ce 01       	movw	r24, r28
 a54:	87 54       	subi	r24, 0x47	; 71
 a56:	90 40       	sbci	r25, 0x00	; 0
 a58:	8d 31       	cpi	r24, 0x1D	; 29
 a5a:	91 05       	cpc	r25, r1
 a5c:	08 f0       	brcs	.+2      	; 0xa60 <main+0x13a>
 a5e:	9c cf       	rjmp	.-200    	; 0x998 <main+0x72>
			{
				LCD_MOVE_CURSOR(1,9);
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	69 e0       	ldi	r22, 0x09	; 9
 a64:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR((val/10)+48);
 a68:	ce 01       	movw	r24, r28
 a6a:	b7 01       	movw	r22, r14
 a6c:	0e 94 d6 06 	call	0xdac	; 0xdac <__divmodhi4>
 a70:	c8 2f       	mov	r28, r24
 a72:	86 2f       	mov	r24, r22
 a74:	80 5d       	subi	r24, 0xD0	; 208
 a76:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((val%10)+48);
 a7a:	8c 2f       	mov	r24, r28
 a7c:	80 5d       	subi	r24, 0xD0	; 208
 a7e:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_SEND_CHAR>
				LCD_SEND_STRING("%");
 a82:	c6 01       	movw	r24, r12
 a84:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,1);
 a88:	82 e0       	ldi	r24, 0x02	; 2
 a8a:	61 e0       	ldi	r22, 0x01	; 1
 a8c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("The Soil is Wet  ");
 a90:	c4 01       	movw	r24, r8
 a92:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_SEND_STRING>
 a96:	80 cf       	rjmp	.-256    	; 0x998 <main+0x72>

00000a98 <__divsf3>:
 a98:	0c d0       	rcall	.+24     	; 0xab2 <__divsf3x>
 a9a:	eb c0       	rjmp	.+470    	; 0xc72 <__fp_round>
 a9c:	e3 d0       	rcall	.+454    	; 0xc64 <__fp_pscB>
 a9e:	40 f0       	brcs	.+16     	; 0xab0 <__divsf3+0x18>
 aa0:	da d0       	rcall	.+436    	; 0xc56 <__fp_pscA>
 aa2:	30 f0       	brcs	.+12     	; 0xab0 <__divsf3+0x18>
 aa4:	21 f4       	brne	.+8      	; 0xaae <__divsf3+0x16>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	19 f0       	breq	.+6      	; 0xab0 <__divsf3+0x18>
 aaa:	cc c0       	rjmp	.+408    	; 0xc44 <__fp_inf>
 aac:	51 11       	cpse	r21, r1
 aae:	15 c1       	rjmp	.+554    	; 0xcda <__fp_szero>
 ab0:	cf c0       	rjmp	.+414    	; 0xc50 <__fp_nan>

00000ab2 <__divsf3x>:
 ab2:	f0 d0       	rcall	.+480    	; 0xc94 <__fp_split3>
 ab4:	98 f3       	brcs	.-26     	; 0xa9c <__divsf3+0x4>

00000ab6 <__divsf3_pse>:
 ab6:	99 23       	and	r25, r25
 ab8:	c9 f3       	breq	.-14     	; 0xaac <__divsf3+0x14>
 aba:	55 23       	and	r21, r21
 abc:	b1 f3       	breq	.-20     	; 0xaaa <__divsf3+0x12>
 abe:	95 1b       	sub	r25, r21
 ac0:	55 0b       	sbc	r21, r21
 ac2:	bb 27       	eor	r27, r27
 ac4:	aa 27       	eor	r26, r26
 ac6:	62 17       	cp	r22, r18
 ac8:	73 07       	cpc	r23, r19
 aca:	84 07       	cpc	r24, r20
 acc:	38 f0       	brcs	.+14     	; 0xadc <__divsf3_pse+0x26>
 ace:	9f 5f       	subi	r25, 0xFF	; 255
 ad0:	5f 4f       	sbci	r21, 0xFF	; 255
 ad2:	22 0f       	add	r18, r18
 ad4:	33 1f       	adc	r19, r19
 ad6:	44 1f       	adc	r20, r20
 ad8:	aa 1f       	adc	r26, r26
 ada:	a9 f3       	breq	.-22     	; 0xac6 <__divsf3_pse+0x10>
 adc:	33 d0       	rcall	.+102    	; 0xb44 <__divsf3_pse+0x8e>
 ade:	0e 2e       	mov	r0, r30
 ae0:	3a f0       	brmi	.+14     	; 0xaf0 <__divsf3_pse+0x3a>
 ae2:	e0 e8       	ldi	r30, 0x80	; 128
 ae4:	30 d0       	rcall	.+96     	; 0xb46 <__divsf3_pse+0x90>
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	50 40       	sbci	r21, 0x00	; 0
 aea:	e6 95       	lsr	r30
 aec:	00 1c       	adc	r0, r0
 aee:	ca f7       	brpl	.-14     	; 0xae2 <__divsf3_pse+0x2c>
 af0:	29 d0       	rcall	.+82     	; 0xb44 <__divsf3_pse+0x8e>
 af2:	fe 2f       	mov	r31, r30
 af4:	27 d0       	rcall	.+78     	; 0xb44 <__divsf3_pse+0x8e>
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	bb 1f       	adc	r27, r27
 afe:	26 17       	cp	r18, r22
 b00:	37 07       	cpc	r19, r23
 b02:	48 07       	cpc	r20, r24
 b04:	ab 07       	cpc	r26, r27
 b06:	b0 e8       	ldi	r27, 0x80	; 128
 b08:	09 f0       	breq	.+2      	; 0xb0c <__divsf3_pse+0x56>
 b0a:	bb 0b       	sbc	r27, r27
 b0c:	80 2d       	mov	r24, r0
 b0e:	bf 01       	movw	r22, r30
 b10:	ff 27       	eor	r31, r31
 b12:	93 58       	subi	r25, 0x83	; 131
 b14:	5f 4f       	sbci	r21, 0xFF	; 255
 b16:	2a f0       	brmi	.+10     	; 0xb22 <__divsf3_pse+0x6c>
 b18:	9e 3f       	cpi	r25, 0xFE	; 254
 b1a:	51 05       	cpc	r21, r1
 b1c:	68 f0       	brcs	.+26     	; 0xb38 <__divsf3_pse+0x82>
 b1e:	92 c0       	rjmp	.+292    	; 0xc44 <__fp_inf>
 b20:	dc c0       	rjmp	.+440    	; 0xcda <__fp_szero>
 b22:	5f 3f       	cpi	r21, 0xFF	; 255
 b24:	ec f3       	brlt	.-6      	; 0xb20 <__divsf3_pse+0x6a>
 b26:	98 3e       	cpi	r25, 0xE8	; 232
 b28:	dc f3       	brlt	.-10     	; 0xb20 <__divsf3_pse+0x6a>
 b2a:	86 95       	lsr	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	b7 95       	ror	r27
 b32:	f7 95       	ror	r31
 b34:	9f 5f       	subi	r25, 0xFF	; 255
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__divsf3_pse+0x74>
 b38:	88 0f       	add	r24, r24
 b3a:	91 1d       	adc	r25, r1
 b3c:	96 95       	lsr	r25
 b3e:	87 95       	ror	r24
 b40:	97 f9       	bld	r25, 7
 b42:	08 95       	ret
 b44:	e1 e0       	ldi	r30, 0x01	; 1
 b46:	66 0f       	add	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	bb 1f       	adc	r27, r27
 b4e:	62 17       	cp	r22, r18
 b50:	73 07       	cpc	r23, r19
 b52:	84 07       	cpc	r24, r20
 b54:	ba 07       	cpc	r27, r26
 b56:	20 f0       	brcs	.+8      	; 0xb60 <__divsf3_pse+0xaa>
 b58:	62 1b       	sub	r22, r18
 b5a:	73 0b       	sbc	r23, r19
 b5c:	84 0b       	sbc	r24, r20
 b5e:	ba 0b       	sbc	r27, r26
 b60:	ee 1f       	adc	r30, r30
 b62:	88 f7       	brcc	.-30     	; 0xb46 <__divsf3_pse+0x90>
 b64:	e0 95       	com	r30
 b66:	08 95       	ret

00000b68 <__fixsfsi>:
 b68:	04 d0       	rcall	.+8      	; 0xb72 <__fixunssfsi>
 b6a:	68 94       	set
 b6c:	b1 11       	cpse	r27, r1
 b6e:	b5 c0       	rjmp	.+362    	; 0xcda <__fp_szero>
 b70:	08 95       	ret

00000b72 <__fixunssfsi>:
 b72:	98 d0       	rcall	.+304    	; 0xca4 <__fp_splitA>
 b74:	88 f0       	brcs	.+34     	; 0xb98 <__fixunssfsi+0x26>
 b76:	9f 57       	subi	r25, 0x7F	; 127
 b78:	90 f0       	brcs	.+36     	; 0xb9e <__fixunssfsi+0x2c>
 b7a:	b9 2f       	mov	r27, r25
 b7c:	99 27       	eor	r25, r25
 b7e:	b7 51       	subi	r27, 0x17	; 23
 b80:	a0 f0       	brcs	.+40     	; 0xbaa <__fixunssfsi+0x38>
 b82:	d1 f0       	breq	.+52     	; 0xbb8 <__fixunssfsi+0x46>
 b84:	66 0f       	add	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	1a f0       	brmi	.+6      	; 0xb94 <__fixunssfsi+0x22>
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__fixunssfsi+0x12>
 b92:	12 c0       	rjmp	.+36     	; 0xbb8 <__fixunssfsi+0x46>
 b94:	b1 30       	cpi	r27, 0x01	; 1
 b96:	81 f0       	breq	.+32     	; 0xbb8 <__fixunssfsi+0x46>
 b98:	9f d0       	rcall	.+318    	; 0xcd8 <__fp_zero>
 b9a:	b1 e0       	ldi	r27, 0x01	; 1
 b9c:	08 95       	ret
 b9e:	9c c0       	rjmp	.+312    	; 0xcd8 <__fp_zero>
 ba0:	67 2f       	mov	r22, r23
 ba2:	78 2f       	mov	r23, r24
 ba4:	88 27       	eor	r24, r24
 ba6:	b8 5f       	subi	r27, 0xF8	; 248
 ba8:	39 f0       	breq	.+14     	; 0xbb8 <__fixunssfsi+0x46>
 baa:	b9 3f       	cpi	r27, 0xF9	; 249
 bac:	cc f3       	brlt	.-14     	; 0xba0 <__fixunssfsi+0x2e>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b3 95       	inc	r27
 bb6:	d9 f7       	brne	.-10     	; 0xbae <__fixunssfsi+0x3c>
 bb8:	3e f4       	brtc	.+14     	; 0xbc8 <__fixunssfsi+0x56>
 bba:	90 95       	com	r25
 bbc:	80 95       	com	r24
 bbe:	70 95       	com	r23
 bc0:	61 95       	neg	r22
 bc2:	7f 4f       	sbci	r23, 0xFF	; 255
 bc4:	8f 4f       	sbci	r24, 0xFF	; 255
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	08 95       	ret

00000bca <__floatunsisf>:
 bca:	e8 94       	clt
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <__floatsisf+0x12>

00000bce <__floatsisf>:
 bce:	97 fb       	bst	r25, 7
 bd0:	3e f4       	brtc	.+14     	; 0xbe0 <__floatsisf+0x12>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	99 23       	and	r25, r25
 be2:	a9 f0       	breq	.+42     	; 0xc0e <__floatsisf+0x40>
 be4:	f9 2f       	mov	r31, r25
 be6:	96 e9       	ldi	r25, 0x96	; 150
 be8:	bb 27       	eor	r27, r27
 bea:	93 95       	inc	r25
 bec:	f6 95       	lsr	r31
 bee:	87 95       	ror	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f1 11       	cpse	r31, r1
 bf8:	f8 cf       	rjmp	.-16     	; 0xbea <__floatsisf+0x1c>
 bfa:	fa f4       	brpl	.+62     	; 0xc3a <__floatsisf+0x6c>
 bfc:	bb 0f       	add	r27, r27
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__floatsisf+0x36>
 c00:	60 ff       	sbrs	r22, 0
 c02:	1b c0       	rjmp	.+54     	; 0xc3a <__floatsisf+0x6c>
 c04:	6f 5f       	subi	r22, 0xFF	; 255
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	16 c0       	rjmp	.+44     	; 0xc3a <__floatsisf+0x6c>
 c0e:	88 23       	and	r24, r24
 c10:	11 f0       	breq	.+4      	; 0xc16 <__floatsisf+0x48>
 c12:	96 e9       	ldi	r25, 0x96	; 150
 c14:	11 c0       	rjmp	.+34     	; 0xc38 <__floatsisf+0x6a>
 c16:	77 23       	and	r23, r23
 c18:	21 f0       	breq	.+8      	; 0xc22 <__floatsisf+0x54>
 c1a:	9e e8       	ldi	r25, 0x8E	; 142
 c1c:	87 2f       	mov	r24, r23
 c1e:	76 2f       	mov	r23, r22
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <__floatsisf+0x5e>
 c22:	66 23       	and	r22, r22
 c24:	71 f0       	breq	.+28     	; 0xc42 <__floatsisf+0x74>
 c26:	96 e8       	ldi	r25, 0x86	; 134
 c28:	86 2f       	mov	r24, r22
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	2a f0       	brmi	.+10     	; 0xc3a <__floatsisf+0x6c>
 c30:	9a 95       	dec	r25
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	da f7       	brpl	.-10     	; 0xc30 <__floatsisf+0x62>
 c3a:	88 0f       	add	r24, r24
 c3c:	96 95       	lsr	r25
 c3e:	87 95       	ror	r24
 c40:	97 f9       	bld	r25, 7
 c42:	08 95       	ret

00000c44 <__fp_inf>:
 c44:	97 f9       	bld	r25, 7
 c46:	9f 67       	ori	r25, 0x7F	; 127
 c48:	80 e8       	ldi	r24, 0x80	; 128
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	60 e0       	ldi	r22, 0x00	; 0
 c4e:	08 95       	ret

00000c50 <__fp_nan>:
 c50:	9f ef       	ldi	r25, 0xFF	; 255
 c52:	80 ec       	ldi	r24, 0xC0	; 192
 c54:	08 95       	ret

00000c56 <__fp_pscA>:
 c56:	00 24       	eor	r0, r0
 c58:	0a 94       	dec	r0
 c5a:	16 16       	cp	r1, r22
 c5c:	17 06       	cpc	r1, r23
 c5e:	18 06       	cpc	r1, r24
 c60:	09 06       	cpc	r0, r25
 c62:	08 95       	ret

00000c64 <__fp_pscB>:
 c64:	00 24       	eor	r0, r0
 c66:	0a 94       	dec	r0
 c68:	12 16       	cp	r1, r18
 c6a:	13 06       	cpc	r1, r19
 c6c:	14 06       	cpc	r1, r20
 c6e:	05 06       	cpc	r0, r21
 c70:	08 95       	ret

00000c72 <__fp_round>:
 c72:	09 2e       	mov	r0, r25
 c74:	03 94       	inc	r0
 c76:	00 0c       	add	r0, r0
 c78:	11 f4       	brne	.+4      	; 0xc7e <__fp_round+0xc>
 c7a:	88 23       	and	r24, r24
 c7c:	52 f0       	brmi	.+20     	; 0xc92 <__fp_round+0x20>
 c7e:	bb 0f       	add	r27, r27
 c80:	40 f4       	brcc	.+16     	; 0xc92 <__fp_round+0x20>
 c82:	bf 2b       	or	r27, r31
 c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0x18>
 c86:	60 ff       	sbrs	r22, 0
 c88:	04 c0       	rjmp	.+8      	; 0xc92 <__fp_round+0x20>
 c8a:	6f 5f       	subi	r22, 0xFF	; 255
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	08 95       	ret

00000c94 <__fp_split3>:
 c94:	57 fd       	sbrc	r21, 7
 c96:	90 58       	subi	r25, 0x80	; 128
 c98:	44 0f       	add	r20, r20
 c9a:	55 1f       	adc	r21, r21
 c9c:	59 f0       	breq	.+22     	; 0xcb4 <__fp_splitA+0x10>
 c9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ca0:	71 f0       	breq	.+28     	; 0xcbe <__fp_splitA+0x1a>
 ca2:	47 95       	ror	r20

00000ca4 <__fp_splitA>:
 ca4:	88 0f       	add	r24, r24
 ca6:	97 fb       	bst	r25, 7
 ca8:	99 1f       	adc	r25, r25
 caa:	61 f0       	breq	.+24     	; 0xcc4 <__fp_splitA+0x20>
 cac:	9f 3f       	cpi	r25, 0xFF	; 255
 cae:	79 f0       	breq	.+30     	; 0xcce <__fp_splitA+0x2a>
 cb0:	87 95       	ror	r24
 cb2:	08 95       	ret
 cb4:	12 16       	cp	r1, r18
 cb6:	13 06       	cpc	r1, r19
 cb8:	14 06       	cpc	r1, r20
 cba:	55 1f       	adc	r21, r21
 cbc:	f2 cf       	rjmp	.-28     	; 0xca2 <__fp_split3+0xe>
 cbe:	46 95       	lsr	r20
 cc0:	f1 df       	rcall	.-30     	; 0xca4 <__fp_splitA>
 cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <__fp_splitA+0x30>
 cc4:	16 16       	cp	r1, r22
 cc6:	17 06       	cpc	r1, r23
 cc8:	18 06       	cpc	r1, r24
 cca:	99 1f       	adc	r25, r25
 ccc:	f1 cf       	rjmp	.-30     	; 0xcb0 <__fp_splitA+0xc>
 cce:	86 95       	lsr	r24
 cd0:	71 05       	cpc	r23, r1
 cd2:	61 05       	cpc	r22, r1
 cd4:	08 94       	sec
 cd6:	08 95       	ret

00000cd8 <__fp_zero>:
 cd8:	e8 94       	clt

00000cda <__fp_szero>:
 cda:	bb 27       	eor	r27, r27
 cdc:	66 27       	eor	r22, r22
 cde:	77 27       	eor	r23, r23
 ce0:	cb 01       	movw	r24, r22
 ce2:	97 f9       	bld	r25, 7
 ce4:	08 95       	ret

00000ce6 <__mulsf3>:
 ce6:	0b d0       	rcall	.+22     	; 0xcfe <__mulsf3x>
 ce8:	c4 cf       	rjmp	.-120    	; 0xc72 <__fp_round>
 cea:	b5 df       	rcall	.-150    	; 0xc56 <__fp_pscA>
 cec:	28 f0       	brcs	.+10     	; 0xcf8 <__mulsf3+0x12>
 cee:	ba df       	rcall	.-140    	; 0xc64 <__fp_pscB>
 cf0:	18 f0       	brcs	.+6      	; 0xcf8 <__mulsf3+0x12>
 cf2:	95 23       	and	r25, r21
 cf4:	09 f0       	breq	.+2      	; 0xcf8 <__mulsf3+0x12>
 cf6:	a6 cf       	rjmp	.-180    	; 0xc44 <__fp_inf>
 cf8:	ab cf       	rjmp	.-170    	; 0xc50 <__fp_nan>
 cfa:	11 24       	eor	r1, r1
 cfc:	ee cf       	rjmp	.-36     	; 0xcda <__fp_szero>

00000cfe <__mulsf3x>:
 cfe:	ca df       	rcall	.-108    	; 0xc94 <__fp_split3>
 d00:	a0 f3       	brcs	.-24     	; 0xcea <__mulsf3+0x4>

00000d02 <__mulsf3_pse>:
 d02:	95 9f       	mul	r25, r21
 d04:	d1 f3       	breq	.-12     	; 0xcfa <__mulsf3+0x14>
 d06:	95 0f       	add	r25, r21
 d08:	50 e0       	ldi	r21, 0x00	; 0
 d0a:	55 1f       	adc	r21, r21
 d0c:	62 9f       	mul	r22, r18
 d0e:	f0 01       	movw	r30, r0
 d10:	72 9f       	mul	r23, r18
 d12:	bb 27       	eor	r27, r27
 d14:	f0 0d       	add	r31, r0
 d16:	b1 1d       	adc	r27, r1
 d18:	63 9f       	mul	r22, r19
 d1a:	aa 27       	eor	r26, r26
 d1c:	f0 0d       	add	r31, r0
 d1e:	b1 1d       	adc	r27, r1
 d20:	aa 1f       	adc	r26, r26
 d22:	64 9f       	mul	r22, r20
 d24:	66 27       	eor	r22, r22
 d26:	b0 0d       	add	r27, r0
 d28:	a1 1d       	adc	r26, r1
 d2a:	66 1f       	adc	r22, r22
 d2c:	82 9f       	mul	r24, r18
 d2e:	22 27       	eor	r18, r18
 d30:	b0 0d       	add	r27, r0
 d32:	a1 1d       	adc	r26, r1
 d34:	62 1f       	adc	r22, r18
 d36:	73 9f       	mul	r23, r19
 d38:	b0 0d       	add	r27, r0
 d3a:	a1 1d       	adc	r26, r1
 d3c:	62 1f       	adc	r22, r18
 d3e:	83 9f       	mul	r24, r19
 d40:	a0 0d       	add	r26, r0
 d42:	61 1d       	adc	r22, r1
 d44:	22 1f       	adc	r18, r18
 d46:	74 9f       	mul	r23, r20
 d48:	33 27       	eor	r19, r19
 d4a:	a0 0d       	add	r26, r0
 d4c:	61 1d       	adc	r22, r1
 d4e:	23 1f       	adc	r18, r19
 d50:	84 9f       	mul	r24, r20
 d52:	60 0d       	add	r22, r0
 d54:	21 1d       	adc	r18, r1
 d56:	82 2f       	mov	r24, r18
 d58:	76 2f       	mov	r23, r22
 d5a:	6a 2f       	mov	r22, r26
 d5c:	11 24       	eor	r1, r1
 d5e:	9f 57       	subi	r25, 0x7F	; 127
 d60:	50 40       	sbci	r21, 0x00	; 0
 d62:	8a f0       	brmi	.+34     	; 0xd86 <__mulsf3_pse+0x84>
 d64:	e1 f0       	breq	.+56     	; 0xd9e <__mulsf3_pse+0x9c>
 d66:	88 23       	and	r24, r24
 d68:	4a f0       	brmi	.+18     	; 0xd7c <__mulsf3_pse+0x7a>
 d6a:	ee 0f       	add	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	bb 1f       	adc	r27, r27
 d70:	66 1f       	adc	r22, r22
 d72:	77 1f       	adc	r23, r23
 d74:	88 1f       	adc	r24, r24
 d76:	91 50       	subi	r25, 0x01	; 1
 d78:	50 40       	sbci	r21, 0x00	; 0
 d7a:	a9 f7       	brne	.-22     	; 0xd66 <__mulsf3_pse+0x64>
 d7c:	9e 3f       	cpi	r25, 0xFE	; 254
 d7e:	51 05       	cpc	r21, r1
 d80:	70 f0       	brcs	.+28     	; 0xd9e <__mulsf3_pse+0x9c>
 d82:	60 cf       	rjmp	.-320    	; 0xc44 <__fp_inf>
 d84:	aa cf       	rjmp	.-172    	; 0xcda <__fp_szero>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	ec f3       	brlt	.-6      	; 0xd84 <__mulsf3_pse+0x82>
 d8a:	98 3e       	cpi	r25, 0xE8	; 232
 d8c:	dc f3       	brlt	.-10     	; 0xd84 <__mulsf3_pse+0x82>
 d8e:	86 95       	lsr	r24
 d90:	77 95       	ror	r23
 d92:	67 95       	ror	r22
 d94:	b7 95       	ror	r27
 d96:	f7 95       	ror	r31
 d98:	e7 95       	ror	r30
 d9a:	9f 5f       	subi	r25, 0xFF	; 255
 d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x8c>
 d9e:	fe 2b       	or	r31, r30
 da0:	88 0f       	add	r24, r24
 da2:	91 1d       	adc	r25, r1
 da4:	96 95       	lsr	r25
 da6:	87 95       	ror	r24
 da8:	97 f9       	bld	r25, 7
 daa:	08 95       	ret

00000dac <__divmodhi4>:
 dac:	97 fb       	bst	r25, 7
 dae:	09 2e       	mov	r0, r25
 db0:	07 26       	eor	r0, r23
 db2:	0a d0       	rcall	.+20     	; 0xdc8 <__divmodhi4_neg1>
 db4:	77 fd       	sbrc	r23, 7
 db6:	04 d0       	rcall	.+8      	; 0xdc0 <__divmodhi4_neg2>
 db8:	0c d0       	rcall	.+24     	; 0xdd2 <__udivmodhi4>
 dba:	06 d0       	rcall	.+12     	; 0xdc8 <__divmodhi4_neg1>
 dbc:	00 20       	and	r0, r0
 dbe:	1a f4       	brpl	.+6      	; 0xdc6 <__divmodhi4_exit>

00000dc0 <__divmodhi4_neg2>:
 dc0:	70 95       	com	r23
 dc2:	61 95       	neg	r22
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc6 <__divmodhi4_exit>:
 dc6:	08 95       	ret

00000dc8 <__divmodhi4_neg1>:
 dc8:	f6 f7       	brtc	.-4      	; 0xdc6 <__divmodhi4_exit>
 dca:	90 95       	com	r25
 dcc:	81 95       	neg	r24
 dce:	9f 4f       	sbci	r25, 0xFF	; 255
 dd0:	08 95       	ret

00000dd2 <__udivmodhi4>:
 dd2:	aa 1b       	sub	r26, r26
 dd4:	bb 1b       	sub	r27, r27
 dd6:	51 e1       	ldi	r21, 0x11	; 17
 dd8:	07 c0       	rjmp	.+14     	; 0xde8 <__udivmodhi4_ep>

00000dda <__udivmodhi4_loop>:
 dda:	aa 1f       	adc	r26, r26
 ddc:	bb 1f       	adc	r27, r27
 dde:	a6 17       	cp	r26, r22
 de0:	b7 07       	cpc	r27, r23
 de2:	10 f0       	brcs	.+4      	; 0xde8 <__udivmodhi4_ep>
 de4:	a6 1b       	sub	r26, r22
 de6:	b7 0b       	sbc	r27, r23

00000de8 <__udivmodhi4_ep>:
 de8:	88 1f       	adc	r24, r24
 dea:	99 1f       	adc	r25, r25
 dec:	5a 95       	dec	r21
 dee:	a9 f7       	brne	.-22     	; 0xdda <__udivmodhi4_loop>
 df0:	80 95       	com	r24
 df2:	90 95       	com	r25
 df4:	bc 01       	movw	r22, r24
 df6:	cd 01       	movw	r24, r26
 df8:	08 95       	ret

00000dfa <_exit>:
 dfa:	f8 94       	cli

00000dfc <__stop_program>:
 dfc:	ff cf       	rjmp	.-2      	; 0xdfc <__stop_program>
